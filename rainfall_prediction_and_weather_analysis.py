# -*- coding: utf-8 -*-
"""Rainfall Prediction and Weather Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19XM0tR2Hv10v-lzIpWMf3iD2Q1o3Gd0D
"""

import pandas as pd
import numpy as np
import sklearn

from google.colab import drive

drive.mount('/content/drive')

weatherdf = pd.read_csv("/content/drive/MyDrive/AustraliaWeather/WeatherTrainingData.csv")
weatherdf.shape

weatherdf.rename(columns={'row ID': 'row_ID'}, inplace = True)

weatherdf.isna().sum()

"""**Pre-processing of Training Data**"""

from sklearn.impute import SimpleImputer
impute = SimpleImputer(missing_values=np.nan, strategy="mean")

impute.fit(weatherdf[['MinTemp']])
weatherdf['MinTemp'] = impute.transform(weatherdf[['MinTemp']])

impute.fit(weatherdf[['MaxTemp']])
weatherdf['MaxTemp'] = impute.transform(weatherdf[['MaxTemp']])

impute.fit(weatherdf[['Rainfall']])
weatherdf['Rainfall'] = impute.transform(weatherdf[['Rainfall']])

impute.fit(weatherdf[['Evaporation']])
weatherdf['Evaporation'] = impute.transform(weatherdf[['Evaporation']])

impute.fit(weatherdf[['Sunshine']])
weatherdf['Sunshine'] = impute.transform(weatherdf[['Sunshine']])

impute.fit(weatherdf[['WindGustSpeed']])
weatherdf['WindGustSpeed'] = impute.transform(weatherdf[['WindGustSpeed']])

impute.fit(weatherdf[['WindSpeed9am']])
weatherdf['WindSpeed9am'] = impute.transform(weatherdf[['WindSpeed9am']])

impute.fit(weatherdf[['WindSpeed3pm']])
weatherdf['WindSpeed3pm'] = impute.transform(weatherdf[['WindSpeed3pm']])

impute.fit(weatherdf[['Humidity9am']])
weatherdf['Humidity9am'] = impute.transform(weatherdf[['Humidity9am']])

impute.fit(weatherdf[['Humidity3pm']])
weatherdf['Humidity3pm'] = impute.transform(weatherdf[['Humidity3pm']])

impute.fit(weatherdf[['Pressure9am']])
weatherdf['Pressure9am'] = impute.transform(weatherdf[['Pressure9am']])

impute.fit(weatherdf[['Pressure3pm']])
weatherdf['Pressure3pm'] = impute.transform(weatherdf[['Pressure3pm']])

impute.fit(weatherdf[['Cloud9am']])
weatherdf['Cloud9am'] = impute.transform(weatherdf[['Cloud9am']])

impute.fit(weatherdf[['Cloud3pm']])
weatherdf['Cloud3pm'] = impute.transform(weatherdf[['Cloud3pm']])

impute.fit(weatherdf[['Temp9am']])
weatherdf['Temp9am'] = impute.transform(weatherdf[['Temp9am']])

impute.fit(weatherdf[['Temp3pm']])
weatherdf['Temp3pm'] = impute.transform(weatherdf[['Temp3pm']])

weatherdf.isna().sum()

weatherdf = weatherdf.dropna()
weatherdf.isnull().sum()

weatherdf.head()

"""**Data Analysis**

**Feature Distribution**
"""

import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns

sns.displot(weatherdf, x='MinTemp', hue='RainToday', kde=True)
plt.title("Minimum Temperature Distribution", fontsize = 14)
plt.show()

sns.displot(weatherdf, x='MaxTemp', hue='RainToday', kde=True)
plt.title("Maximum Temperature Distribution", fontsize = 14)
plt.show()

sns.displot(weatherdf, x='WindSpeed9am', hue='RainToday', kde=True)
plt.title("Wind Speed at 9am Distribution", fontsize = 14)
plt.show()

sns.displot(weatherdf, x='WindSpeed3pm', hue='RainToday', kde=True)
plt.title("Wind Speed at 3pm Distribution", fontsize = 14)
plt.show()

sns.displot(weatherdf, x='Humidity9am', hue='RainToday', kde=True)
plt.title("Humidity at 9am Distribution", fontsize = 14)
plt.show()

sns.displot(weatherdf, x='Humidity3pm', hue='RainToday', kde=True)
plt.title("Humidity at 3pm Distribution", fontsize = 14)
plt.show()

sns.displot(weatherdf, x='Pressure9am', hue='RainToday', kde=True)
plt.title("Pressure at 9am Distribution", fontsize = 14)
plt.show()

sns.displot(weatherdf, x='Pressure3pm', hue='RainToday', kde=True)
plt.title("Pressure at 3pm Distribution", fontsize = 14)
plt.show()

sns.displot(weatherdf, x='Cloud9am', hue='RainToday', kde=True)
plt.title("Cloud at 9am Distribution", fontsize = 14)
plt.show()

sns.displot(weatherdf, x='Cloud3pm', hue='RainToday', kde=True)
plt.title("Cloud at 3pm Distribution", fontsize = 14)
plt.show()

sns.displot(weatherdf, x='Temp9am', hue='RainToday', kde=True)
plt.title("Temperature at 9am Distribution", fontsize = 14)
plt.show()

sns.displot(weatherdf, x='Temp3pm', hue='RainToday', kde=True)
plt.title("Temperature at 3pm Distribution", fontsize = 14)
plt.show()

"""**Locationwise Observations**"""

windspeed_weatherdf = weatherdf.groupby(['Location'])[['WindSpeed9am', 'WindSpeed3pm']].mean()
windspeed_weatherdf = windspeed_weatherdf.reset_index()
windspeed_weatherdf.head()

x = windspeed_weatherdf.loc[:, 'Location']
y1 = windspeed_weatherdf['WindSpeed9am'] 
y2 = windspeed_weatherdf['WindSpeed3pm']

plt.figure(figsize = (15, 8))

plt.plot(x, y1, marker='D', color = 'darkgreen', label = 'WindSpeed at 9am') 
plt.plot(x, y2, marker='D', color = 'darkorange', label = 'WindSpeed at 3pm')

plt.xlabel('Location', fontsize = 14)
plt.ylabel('WindSpeed', fontsize = 14)
plt.title('Location-wise observation of Average WindSpeed', fontsize = 18)
plt.legend(fontsize = 10, loc = 'best')
plt.xticks(rotation=80)
plt.show()

temperature_weatherdf = weatherdf.groupby(['Location'])[['Temp9am', 'Temp3pm']].mean()
temperature_weatherdf = temperature_weatherdf.reset_index()
temperature_weatherdf.head()

x = temperature_weatherdf.loc[:, 'Location']
y1 = temperature_weatherdf['Temp9am'] 
y2 = temperature_weatherdf['Temp3pm']

plt.figure(figsize = (15, 8))

plt.plot(x, y1, marker='D', color = 'darkred', label = 'Temperature at 9am') 
plt.plot(x, y2, marker='D', color = 'darkblue', label = 'Temperature at 3pm')

plt.xlabel('Location', fontsize = 14)
plt.ylabel('Temperature', fontsize = 14)
plt.title('Location-wise observation of Average Temperature', fontsize = 18)
plt.legend(fontsize = 10, loc = 'best')
plt.xticks(rotation=80)
plt.show()

cloud_weatherdf = weatherdf.groupby(['Location'])[['Cloud9am', 'Cloud3pm']].mean()
cloud_weatherdf = cloud_weatherdf.reset_index()
cloud_weatherdf.head()

x = cloud_weatherdf.loc[:, 'Location']
y1 = cloud_weatherdf['Cloud9am'] 
y2 = cloud_weatherdf['Cloud3pm']

plt.figure(figsize = (15, 8))

plt.plot(x, y1, marker='D', color = 'darkgreen', label = 'Cloud at 9am') 
plt.plot(x, y2, marker='D', color = 'darkorange', label = 'CLoud at 3pm')

plt.xlabel('Location', fontsize = 14)
plt.ylabel('CLoud', fontsize = 14)
plt.title('Location-wise observation of Average CLoud', fontsize = 18)
plt.legend(fontsize = 10, loc = 'best')
plt.xticks(rotation=80)
plt.show()

"""**Less Accurate Feature**"""

del weatherdf['row_ID']
del weatherdf['Location']
del weatherdf['WindGustDir']
del weatherdf['WindDir9am']
del weatherdf['WindDir3pm']

"""**Label Encoding**"""

weatherdf.loc[weatherdf.RainToday == "Yes", "RainToday"] = 1
weatherdf.loc[weatherdf.RainToday == "No", "RainToday"] = 0
weatherdf['RainToday'] = weatherdf['RainToday'].astype(int)
weatherdf

"""**Train-Test Split**"""

X = weatherdf.drop('RainTomorrow', axis=1)
y = weatherdf['RainTomorrow']

"""**Scaling**"""

from sklearn.preprocessing import MinMaxScaler
minmax_scaler = MinMaxScaler()
minmax_scaler.fit(weatherdf)
weatherdf=pd.DataFrame(minmax_scaler.transform(weatherdf))
weatherdf

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=10)

"""**Classification Models**

**Machine Learning Algorithm**

**Linear Regression**
"""

from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(X_train,y_train )

y_pred = lr.predict(X_test)

accuracy_lr = lr.score(X_test, y_test)
accuracy_lr

"""**Random Forest**"""

from sklearn.ensemble import RandomForestClassifier

rf = RandomForestClassifier()
rf.fit(X_train, y_train)

y_pred=rf.predict(X_test)

accuracy_rf = rf.score(X_test, y_test)
accuracy_rf

"""**Logistic Regression**"""

from sklearn.linear_model import LogisticRegression

logr = LogisticRegression()
logr.fit(X_train,y_train )

y_pred = logr.predict(X_test)

accuracy_logr = logr.score(X_test, y_test)
accuracy_logr

"""**K-Neighbors Classifier**"""

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier()
knn.fit(X_train, y_train)

y_pred = knn.predict(X_test)

accuracy_knn = knn.score(X_test, y_test)
accuracy_knn

"""**Decision Tree Classifier**"""

from sklearn.tree import DecisionTreeClassifier

dtree = DecisionTreeClassifier()
dtree.fit(X_train, y_train)

y_pred=dtree.predict(X_test)

accuracy_dtree = dtree.score(X_test, y_test)
accuracy_dtree

"""**AdaBoost Classifier**"""

from sklearn.ensemble import AdaBoostClassifier

adaboost = AdaBoostClassifier()
adaboost.fit(X_train, y_train)

y_pred=adaboost.predict(X_test)

accuracy_adaboost = adaboost.score(X_test, y_test)
accuracy_adaboost

"""**Deep Learning Algorithms**

**Multi Layer Perceptron**
"""

from sklearn.neural_network import MLPClassifier

MLPclassifier = MLPClassifier()
MLPclassifier.fit(X_train, y_train)

y_pred=MLPclassifier.predict(X_test)

accuracy_MLPclassifier = MLPclassifier.score(X_test, y_test)
accuracy_MLPclassifier

"""**Chrononet**"""

from tensorflow.keras.layers import Input,Dense,concatenate,Flatten,GRU,Conv1D
from tensorflow.keras.models import Model

X_train = X_train.values
print(X_train.shape)
X_train = X_train.reshape(X_train.shape[0], X_train.shape[1],1)
X_test = X_test.values
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1],1)
print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

def block(input):
  conv1 = Conv1D(32, 2, strides=2,activation='relu',padding="same")(input)
  print(conv1.shape)
  conv2 = Conv1D(32, 4, strides=2,activation='relu',padding="causal")(input)
  conv3 = Conv1D(32, 8, strides=2,activation='relu',padding="causal")(input)
  x = concatenate([conv1,conv2,conv3],axis=2)
  return x
input= Input(shape=(17,1))
block1=block(input)
block2=block(block1)
block3=block(block2)
gru_out1 = GRU(32,activation='tanh',return_sequences=True)(block3)
gru_out2 = GRU(32,activation='tanh',return_sequences=True)(gru_out1)
gru_out = concatenate([gru_out1,gru_out2],axis=2)
gru_out3 = GRU(32,activation='tanh',return_sequences=True)(gru_out)
gru_out = concatenate([gru_out1,gru_out2,gru_out3])
gru_out4 = GRU(32,activation='tanh')(gru_out)
print(gru_out4.shape)
predictions = Dense(1,activation='sigmoid')(gru_out4)
model = Model(inputs=input, outputs=predictions)

model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics=['accuracy'])

history = model.fit(X_train,y_train,epochs=50,batch_size=1024,validation_data=(X_test,y_test))

Seq_model_score = model.evaluate(X_test, y_test)
Seq_model_accuracy = round(Seq_model_score[1]*100, 2)

"""**Accuracy Analysis Table**"""

accuracy_dict = {'Linear Regrssion' : accuracy_lr*100,
                 'Random Forest' : accuracy_rf*100,
                 'Logistic Regrssion' : accuracy_logr*100,
                 'K-Nearest Neighbors' : accuracy_knn*100,
                 'Decision Tree' : accuracy_dtree*100,
                 'AdaBoost Classifier' : accuracy_adaboost*100,
                 'Multi Layer Perceptron' : accuracy_MLPclassifier*100,
                 'Chrono-net' : Seq_model_accuracy
                 }
                
            
print("Classification Accuracy of All Models")
print('=====================================')
print()
for k, v in accuracy_dict.items():
    print(k,"=",v,"%")

"""**Accuracy Graph**"""

import matplotlib.pyplot as plt
plt.figure(figsize=(20,10))
graph = ['Linear Regrssion', 'Random Forest', 'Logistic Regrssion', 'K-Nearest Neighbors', 'Decision Tree', 'AdaBoost Classifier', 'Multi Layer Perceptron', 'Chrono-net']
accuracies_graph= [accuracy_lr*100, accuracy_rf*100, accuracy_logr*100, accuracy_knn*100, accuracy_dtree*100, accuracy_adaboost*100, accuracy_MLPclassifier*100, Seq_model_accuracy ]
plt.bar(graph, accuracies_graph)
plt.xlabel("Models")
plt.ylabel("Accuracy")
plt.title("Accuracy classifiers Graph")
plt.show()